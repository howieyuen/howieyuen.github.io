<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on 袁昊的学习笔记</title>
    <link>https://howieyuen.github.io/docs/golang/data-structure/</link>
    <description>Recent content in 数据结构 on 袁昊的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://howieyuen.github.io/docs/golang/data-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>chan</title>
      <link>https://howieyuen.github.io/docs/golang/data-structure/chan/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/docs/golang/data-structure/chan/</guid>
      <description>&lt;p&gt;Go 语言中最常见的、也是经常被人提及的设计模式就是 —— 不要通过共享内存的方式进行通信，而是应该通过通信的方式共享内存。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;先入先出&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;目前的 Channel 收发操作均遵循了先入先出（FIFO）的设计，具体规则如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先从 Channel 读取数据的 Goroutine 会先接收到数据；&lt;/li&gt;&#xA;&lt;li&gt;先向 Channel 发送数据的 Goroutine 会得到先发送数据的权利；&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>map</title>
      <link>https://howieyuen.github.io/docs/golang/data-structure/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/docs/golang/data-structure/map/</guid>
      <description>&lt;p&gt;粗略的讲，Go 语言中 map 采用的是哈希查找表，&#xA;由一个 key 通过哈希函数得到哈希值，&#xA;64 位系统中就生成一个 64 bit 的哈希值，&#xA;由这个哈希值将 key 对应到不同的桶（bucket）中，&#xA;当有多个哈希映射到相同的的桶中时，使用链表解决哈希冲突。&lt;/p&gt;</description>
    </item>
    <item>
      <title>slice</title>
      <link>https://howieyuen.github.io/docs/golang/data-structure/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/docs/golang/data-structure/slice/</guid>
      <description>&lt;p&gt;slice 的底层数据是数组，slice 是对数组的封装，它描述一个数组的片段。两者都可以通过下标来访问单个元素。&#xA;数组是定长的，长度定义好之后，不能再更改。在 Go 中，数组是不常见的，因为其长度是类型的一部分，&#xA;限制了它的表达能力，比如 &lt;code&gt;[3]int&lt;/code&gt; 和 &lt;code&gt;[4]int&lt;/code&gt; 就是不同的类型。&#xA;而切片则非常灵活，它可以动态地扩容。切片的类型和长度无关。&#xA;数组就是一片连续的内存， slice 实际上是一个结构体，包含三个字段：长度、容量、底层数组。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
