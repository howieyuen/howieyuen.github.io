<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Infra as Code on 袁昊的学习笔记</title>
    <link>https://howieyuen.github.io/docs/XaC/infra-as-code/</link>
    <description>Recent content in Infra as Code on 袁昊的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://howieyuen.github.io/docs/XaC/infra-as-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Acorn：k8s 应用部署框架</title>
      <link>https://howieyuen.github.io/docs/XaC/infra-as-code/getting-started-of-acorn/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/docs/XaC/infra-as-code/getting-started-of-acorn/</guid>
      <description>概述 # Acorn 是一个应用程序打包和部署框架，可简化在 Kubernetes 上运行的应用程序。 Acorn 能够将应用程序的所有 Docker 镜像、配置和部署规范打包到单个 Acorn 镜像工件中。 此工件可发布到任何 OCI 容器注册表，允许它部署在任何开发、测试或生产环境的 Kubernetes 上。 Acorn 镜像的可移植性使开发人员能够在本地开发应用程序并转移到生产环境，而无需切换工具或技术堆栈。&#xA;开发人员通过在 Acornfile 中描述应用程序配置来创建 Acorn 镜像。 Acornfile 描述了整个应用程序，没有 Kubernetes YAML 文件的所有样板。 Acorn CLI 用于在任何 Kubernetes 集群上构建、部署和操作 Acorn 镜像。&#xA;架构 # acorn：安装在终端用户的机器上，并针对在 Kubernetes 集群中运行的 acorn-apiserver 交互 acorn-apiserver：k8s 风格的 API 服务器，通过 k8s aggregation layer 访问 acorn-controller：负责将 Acorn 应用程序转换为实际的 Kubernetes 资源 buildkit &amp;amp; internal registry：镜像构建服务、Buildkit 和内部镜像注册表作为同级容器部署在单个 pod 中。当 Buildkit 构建新的 Acorn 镜像时，这简化了两个组件之间的通信 工作流 # 下图说明了用户在使用 Acorn 时所采取的步骤：</description>
    </item>
    <item>
      <title>Terraform 执行状态和阶段关系</title>
      <link>https://howieyuen.github.io/docs/XaC/infra-as-code/terraform-workflow/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/docs/XaC/infra-as-code/terraform-workflow/</guid>
      <description>Terraform 每次运行都经过多个操作阶段（Pending、Plan、Cost Estimation、Policy Check、Apply 和 Completion），Terraform Cloud 将这些阶段的进度显示为运行状态。 在 Terraform Cloud 主页上的工作区列表中，每个工作区都显示了它当前正在处理的运行状态。（或者，如果没有正在进行的运行，则为最近完成的运行的状态。）&#xA;Pending # 阶段状态：&#xA;Pending：Terraform Cloud 尚未开始运行操作。Terraform Cloud 按照排队的顺序处理每个工作区的运行，并且运行在每次运行完成之前一直处于挂起状态。 离开状态：&#xA;Discarded：如果用户在开始前放弃运行，则运行不会继续。 Planning：如果运行在队列中排在首位，它会自动进入 Plan 阶段。 图示：&#xA;Fetching # Terraform Cloud 可能需要在开始计划之前从 VCS 获取配置。当所有运行完成后，Terraform Cloud 会自动存档通过 VCS 创建的配置版本，然后重新获取文件以供后续运行使用。&#xA;阶段状态：&#xA;Fetching：如果 Terraform Cloud 尚未从 VCS 获取配置，则运行将进入此状态，直到配置可用。 离开状态：&#xA;Plan Errored：如果 Terraform Cloud 在从 VCS 获取配置时遇到错误，则运行不会继续。 如果 Terraform 成功获取配置，则运行进入下一阶段。 图示：&#xA;Pre-plan（可选） # 创建 Run Task，并关联 Workspace，选择在 “Pre-plan” 时执行，才有 Pre-plan 阶段。在此阶段，Terraform Cloud 将有关运行的信息发送到已配置的外部系统，并等待 passed 或 failed 响应以确定运行是否可以继续。</description>
    </item>
  </channel>
</rss>
