<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on 袁昊的学习笔记</title>
    <link>https://howieyuen.github.io/posts/</link>
    <description>Recent content in Blogs on 袁昊的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://howieyuen.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google 在 MonoRepo 上的实践</title>
      <link>https://howieyuen.github.io/posts/google-on-monorepo/</link>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/posts/google-on-monorepo/</guid>
      <description>&lt;p&gt;Google 在早期就使用集中式源代码控制系统管理共享代码库。也就是说，在 Google 内部，是先有的 MonoRepo，然后基于 MonoRepo 形成了一套基于主干开发的工作流程，以及支撑此流程的工具。&lt;/p&gt;</description>
    </item>
    <item>
      <title>令人愉悦的 CLI 的 10 条设计原则</title>
      <link>https://howieyuen.github.io/posts/10-design-principles-for-delightful-clis/</link>
      <pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/posts/10-design-principles-for-delightful-clis/</guid>
      <description>原文链接： 10 design principles for delightful CLIs 与既定惯例保持一致 # 自计算机诞生以来，CLI 几乎就已经存在，因此你无需重新发明轮子来创造令人愉悦的体验。&#xA;已经有许多既定的约定和指南可用于设计 CLI，例如 Heroku 的 CLI 风格指南和 Microsoft 风格指南。 使用你的用户已经熟悉的现存的模式，你可以确保他们很容易习惯你的工具。&#xA;构造 help 命令 # 在 CLI 中添加 --help 命令可为用户提供重要的文档。 它让新用户发现所有可用的命令和选项，而更有经验的用户可以在使用 CLI 的整个过程中将其作为参考。&#xA;为了帮助你的用户完成他们的任务，--help 部分应该提供一个完整的命令列表、子命令和任何具有简单描述的短命令。&#xA;你还应该确保你的用户可以在任何特定命令之后运行 --help 标志，以快速查看他们可以用来处理该命令的完整语法（用法、参数和选项）。&#xA;可视化执行过程 # 虽然系统状态的可见性是适用于任何界面设计，但在设计 CLI 的纯文本界面时尤其重要。 如果没有图形用户界面 (GUI) 来提供即时的视觉反馈，CLI 并不总是能很好地让用户了解幕后发生的事情。&#xA;我们建议你使用进度条、旋转器和其他视觉设备来显示正在发生的事情。 我们还建议你将长时间运行的任务分解为一系列有意义的步骤，以帮助将系统状态传达给你的用户。&#xA;增加执行反馈 # CLI 并不总是清楚地表明何时发生了操作。 对于用户执行的每项操作，你的 CLI 都应提供平等且适当的反应，清楚地突出显示当前系统状态。&#xA;例如，在 Forge CLI 中，如果登录用户键入 forge logout，则会显示一条消息，明确指示操作已成功。&#xA;可读的错误信息 # 错误是意料之中的，甚至（我们敢说）是使用任何 CLI 的重要组成部分。&#xA;在测试 Forge CLI 时，我们观察到错误是阻止开发人员构建其应用程序的主要障碍之一。</description>
    </item>
    <item>
      <title>Golang 中的 RSA 加解密算法</title>
      <link>https://howieyuen.github.io/posts/rsa-crypto-in-go/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/posts/rsa-crypto-in-go/</guid>
      <description>&lt;p&gt;本文受到 Gitlab 中 &#xA;  &lt;a href=&#34;https://gitlab.com/rahasak-labs/crypgo&#34;&gt;&lt;code&gt;crypgo&lt;/code&gt;&lt;/a&gt; 项目启发，&#xA;作者在 Medium 中发表了一篇博文，&#xA;  &lt;a href=&#34;https://medium.com/rahasak/golang-rsa-cryptography-1f1897ada311&#34;&gt;RSA cryptography in Golang&lt;/a&gt; 作为说明。&#xA;读完后发现代码中存在一些小问题，因此重整代码实现，使其更加实用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DevOps vs GitOps</title>
      <link>https://howieyuen.github.io/posts/devops-vs-gitops/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/posts/devops-vs-gitops/</guid>
      <description>&lt;p&gt;GitOps 和 DevOps 正迅速成为开发团队的黄金标准方法。DevOps 文化代表了从传统软件和技术开发的转变，传统的软件和技术开发涉及从构思和概念到发布的线性路径，并鼓励协作和快速反馈，而不是孤立地工作。在本文中，我们将仔细研究 GitOps 与 DevOps，以帮助确定 GitOps 是否适用于您的软件开发项目。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何管理 GitOps Secret：详细指南</title>
      <link>https://howieyuen.github.io/posts/how-to-manage-gitops-secrets-a-detailed-guide/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/posts/how-to-manage-gitops-secrets-a-detailed-guide/</guid>
      <description>&lt;p&gt;GitOps 正变得越来越流行。越来越多的公司开始使用 Git 作为其基础设施和应用程序配置的真实来源。然而，伴随其优势而来的是挑战。例如，如果你的所有配置都存储在 Git 中，你如何管理 Secret？你不能简单地将密码和令牌以明文形式提交到 Git 存储库，即使该存储库是私有的并且只有少数人可以访问它。在这篇文章中，你将学习如何安全地管理 GitOps Secret。敬请关注。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus Operator 设计文档</title>
      <link>https://howieyuen.github.io/posts/prometheus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://howieyuen.github.io/posts/prometheus/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;原文链接：&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/&#34;&gt;https://prometheus-operator.dev/docs/operator/design/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;本文将阐述 Prometheus Operator 管理的 CRD 之间的设计和交互。由 Prometheus Operator 管理的 CRD 有：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#prometheus&#34;&gt;Prometheus&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#alertmanager&#34;&gt;Alertmanager&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#thanosruler&#34;&gt;ThanosRuler&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#servicemonitor&#34;&gt;ServiceMonitor&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#podmonitor&#34;&gt;PodMonitor&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#probe&#34;&gt;Probe&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#prometheusrule&#34;&gt;PrometheusRule&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;  &lt;a href=&#34;https://prometheus-operator.dev/docs/operator/design/#alertmanagerconfig&#34;&gt;AlertmanagerConfig&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
